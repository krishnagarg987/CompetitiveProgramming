https://www.geeksforgeeks.org/efficiently-implement-k-stacks-single-array/


class KStacks:
    def __init__(self,size,k):
        self.array=[None]*size
        self.size=size
        self.k=k
        self.top=[-1]*k
        self.next=[i+1 for i in range(size)]
        self.next[size-1]=-1
        self.free=0
    
    def push(self,item,sn):
        if self.free==-1:
            print("stack full"+str(item))
            return
        insert_at=self.free
        self.free=self.next[self.free]
        self.array[insert_at]=item
        self.next[insert_at]=self.top[sn]
        self.top[sn]=insert_at
    
    def pop(self,sn):
        if self.top[sn]==-1:
            print("stack empty")
            return
        top_of_stack=self.top[sn]
        self.top[sn]=self.next[self.top[sn]]
        self.next[top_of_stack]=self.free
        self.free=top_of_stack
        return self.array[top_of_stack]
        
    
kstacks = KStacks(10,3)
kstacks.push(15, 2)
kstacks.push(45, 2)
kstacks.push(17, 1)
kstacks.push(49, 1)
kstacks.push(39, 1)
kstacks.push(11, 0)
kstacks.push(9, 0)
kstacks.push(7, 0)
print("Popped element from stack 2 is " + str(kstacks.pop(2)))
print("Popped element from stack 1 is " + str(kstacks.pop(1)))
print("Popped element from stack 0 is " + str(kstacks.pop(0)))
